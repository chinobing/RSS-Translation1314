<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>黑客新闻：最新</title>
    <link>https://news.ycombinator.com/newest</link>
    <description>黑客新闻 RSS</description>
    <lastBuildDate>Mon, 29 Apr 2024 09:16:24 GMT</lastBuildDate>
    <item>
      <title>Personal Paint 7.4 更新 A600GS 的 ARM 本机加速 [pdf]</title>
      <link>http://www.a-eon.com/news/News_Release_A600GS_PPaint.pdf</link>
      <description><![CDATA[文章网址：http://www.a-eon.com/news/News_Release_A600GS_PPaint.pdf
评论网址：https://news.ycombinator.com/item?id=40196137
积分：1
# 条评论：0]]></description>
      <guid>http://www.a-eon.com/news/News_Release_A600GS_PPaint.pdf</guid>
      <pubDate>Mon, 29 Apr 2024 09:00:25 GMT</pubDate>
    </item>
    <item>
      <title>一名黑客因一张“空”车牌而陷入门票地狱（2019）</title>
      <link>https://www.wired.com/story/null-license-plate-landed-one-hacker-ticket-hell/</link>
      <description><![CDATA[文章网址：https://www.wired.com /story/null-license-plate-landed-one-hacker-ticket-hell/
评论网址：https://news.ycombinator.com/item?id=40196135
积分：1
# 条评论：0]]></description>
      <guid>https://www.wired.com/story/null-license-plate-landed-one-hacker-ticket-hell/</guid>
      <pubDate>Mon, 29 Apr 2024 08:59:52 GMT</pubDate>
    </item>
    <item>
      <title>命令式服装中的功能语义（理查德·费尔德曼）</title>
      <link>https://rtfeldman.com/imperative-clothing</link>
      <description><![CDATA[文章网址：https://rtfeldman.com/imperative-clothing
评论网址：https://news.ycombinator.com/item?id=40196115
积分：2
# 条评论：0]]></description>
      <guid>https://rtfeldman.com/imperative-clothing</guid>
      <pubDate>Mon, 29 Apr 2024 08:56:17 GMT</pubDate>
    </item>
    <item>
      <title>通过实际示例探索 Solidity 的内存管理</title>
      <link>https://news.ycombinator.com/item?id=40196092</link>
      <description><![CDATA[大家好，HN 社区，我一直在深入研究 Solidity 的内存管理，并发现了一些与可用内存指针 (0x40) 相关的有趣行为。Solidity 使用此指针来跟踪在合约执行期间应分配新内存的位置。以下是一段代码，说明了 Solidity 如何处理动态数组的内存分配：```solidity
pragma solidity ^0.8.0;contract FreeMemoryPointerExample {
function allocateMemory() public pure returns (uint initialPointer, uint afterArray) {
assembly {
// 最初读取可用内存指针
initialPointer := mload(0x40)
}
// 直接在函数中初始化变量以避免外部输入
uint[] memory myArray = new uint[](3); // 3 个 uint 的动态数组
myArray[0] = 1; // 分配值以演示用法
myArray[1] = 2;
myArray[2] = 3; assembly {
// 手动调整空闲内存指针，就像为数组分配内存一样
mstore(0x40, add(mload(0x40), 0x60)) 
afterArray := mload(0x40)
}

}
```
以下是函数调用的结果：
0:
uint256: initialPointer 128
1:
uint256: afterArray 352在此示例中，内存指针从 128 开始，这是新合约调用中动态分配内存的初始位置。在分配三个 uint 元素的动态数组（每个元素需要 32 个字节）后，我们手动将空闲内存指针调整 96 个字节（十六进制为 0x60）。因此，指针移动到 352。这说明了每个元素的内存空间以及任何潜在开销（例如数组长度或填充）如何影响内存分配。从 128 到 352 的大幅跳跃还包括用于存储数组长度本身的空间，这是仅从元素大小来看不会立即显现的额外 32 个字节。这突出了 Solidity 中动态内存分配所涉及的开销。很想听听您对此的看法，特别是如果您对优化智能合约中的内存管理有见解，或者分享您的经验！附注：这是我在 HN 上分享的第一次深入研究 Solidity 的内存管理。我渴望学习和进步，因此，如果您对文章有任何反馈，包括解释的清晰度，或者代码如何改进，我将不胜感激！

评论网址：https://news.ycombinator.com/item?id=40196092
积分：1
评论数：0]]></description>
      <guid>https://news.ycombinator.com/item?id=40196092</guid>
      <pubDate>Mon, 29 Apr 2024 08:52:56 GMT</pubDate>
    </item>
    <item>
      <title>FTC 规定健康应用程序从现在起必须报告数据泄露</title>
      <link>https://www.ftc.gov/news-events/news/press-releases/2024/04/ftc-finalizes-changes-health-breach-notification-rule</link>
      <description><![CDATA[文章网址： https://www.ftc.gov/news-events/news/press-releases/2024/04/ftc-finalizes-changes-health-breach-notification-rule
评论网址：https://news.ycombinator.com/item?id=40196081
积分：1
# 条评论：0]]></description>
      <guid>https://www.ftc.gov/news-events/news/press-releases/2024/04/ftc-finalizes-changes-health-breach-notification-rule</guid>
      <pubDate>Mon, 29 Apr 2024 08:51:21 GMT</pubDate>
    </item>
    <item>
      <title>尼克斯：转折点</title>
      <link>https://kilo.bytesize.xyz/nix-the-breaking-point</link>
      <description><![CDATA[文章网址：https://kilo.bytesize.xyz/nix-the-writing-point
评论网址：https://news.ycombinator.com/item?id=40196068
积分：2
# 条评论：0]]></description>
      <guid>https://kilo.bytesize.xyz/nix-the-breaking-point</guid>
      <pubDate>Mon, 29 Apr 2024 08:48:31 GMT</pubDate>
    </item>
    <item>
      <title>三星计划推出“Video AI”技术</title>
      <link>https://www.ibtimes.co.uk/samsung-galaxy-ai-roadmap-video-ai-potential-google-collaboration-horizon-1724439</link>
      <description><![CDATA[文章网址：https:// www.ibtimes.co.uk/samsung-galaxy-ai-roadmap-video-ai-pottial-google-collaboration-horizo​​n-1724439
评论网址：https://news.ycombinator.com/item?id=40196059
积分：1
# 条评论：0]]></description>
      <guid>https://www.ibtimes.co.uk/samsung-galaxy-ai-roadmap-video-ai-potential-google-collaboration-horizon-1724439</guid>
      <pubDate>Mon, 29 Apr 2024 08:46:33 GMT</pubDate>
    </item>
    <item>
      <title>SteamOS 对 Linux 生态系统的贡献 (2023)</title>
      <link>https://lwn.net/Articles/946188/</link>
      <description><![CDATA[文章网址：https://lwn.net/Articles/946188/
评论网址：https://news.ycombinator.com/item?id=40196002
积分：1
# 条评论：0]]></description>
      <guid>https://lwn.net/Articles/946188/</guid>
      <pubDate>Mon, 29 Apr 2024 08:39:32 GMT</pubDate>
    </item>
    <item>
      <title>科学家利用盐和水的混合物创造了一种功能性脑细胞</title>
      <link>https://www.sciencealert.com/scientists-have-created-a-functional-brain-cell-based-on-a-mix-of-salt-and-water</link>
      <description><![CDATA[文章网址：https://www.sciencealert.com/scientists-have-created-a-function-brain-cell-based-on-a-mix-of-salt-and-water
评论网址：https://news.ycombinator.com/item?id=40195999
积分：1
# 条评论：0]]></description>
      <guid>https://www.sciencealert.com/scientists-have-created-a-functional-brain-cell-based-on-a-mix-of-salt-and-water</guid>
      <pubDate>Mon, 29 Apr 2024 08:39:24 GMT</pubDate>
    </item>
    <item>
      <title>1000 所学校现在有监控孩子们在浴室里待了多久的工具</title>
      <link>https://www.vice.com/en/article/dy73n7/ehallpass-1000-thousand-schools-monitor-bathroom</link>
      <description><![CDATA[文章网址：https://www.vice.com/ en/article/dy73n7/ehallpass-1000-thousand-schools-monitor-bathroom
评论网址：https://news.ycombinator.com/item?id=40195996
积分：1
# 条评论：0]]></description>
      <guid>https://www.vice.com/en/article/dy73n7/ehallpass-1000-thousand-schools-monitor-bathroom</guid>
      <pubDate>Mon, 29 Apr 2024 08:38:35 GMT</pubDate>
    </item>
    </channel>
</rss>