<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 02 Jul 2025 15:22:06 GMT</lastBuildDate>
    <item>
      <title>🚀obilet移动应用程序 -  SMS登录自动化与Java + Appium + ADB</title>
      <link>https://www.reddit.com/r/programming/comments/1lpxw1m/obilet_mobile_app_sms_login_automation_with_java/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;      obilet移动应用程序 -  SMS登录自动化自动化自动化 + appium + adb + adb     在此开放源项目中，我自动化了obilet android应用程序的登录过程。通过ADB logCat  🤖appium自动化用于输入＆amp; Flow  🧪testng +结构化测试报告的诱惑href =“ https://github.com/sezginmert/obilet-android-test-automation”&gt; https://github.com/sezginmert/sezginmert/ssezginmert/obilet-test-automation    ＃obilet #adb #opensource   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/u/前_answer3513       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpxw1m/obilet_mobile_app_sms_login_automation_with_java/</guid>
      <pubDate>Wed, 02 Jul 2025 14:52:15 GMT</pubDate>
    </item>
    <item>
      <title>🚀空手道API测试项目 - 开源</title>
      <link>https://www.reddit.com/r/programming/comments/1lpxvbv/karate_api_testing_project_open_source/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    空手道API测试项目 - 开源  我刚刚发布了一个使用空手道框架用于API测试自动化的开放源项目。如果您正在进行REST API测试并想要表达的Gherkin风格的语法，则此存储库可能会帮助您入门。断言 有组织的基于场景的测试  ci/cd准备好测试结构    github：欢迎反馈和贡献！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/u/前_answer3513       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpxvbv/karate_api_testing_project_open_source/</guid>
      <pubDate>Wed, 02 Jul 2025 14:51:29 GMT</pubDate>
    </item>
    <item>
      <title>这是AI本地工程师的所作所为与您不同</title>
      <link>https://www.reddit.com/r/programming/comments/1lpxrju/heres_what_ainative_engineers_are_doing/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;态href =“ https://seroter.com/2025/07/01/heres-what-what-what-ai-native-native-native-native-native-doing-doing-doing-differy--than-you/”&gt; [link]     32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpxrju/heres_what_ainative_engineers_are_doing/</guid>
      <pubDate>Wed, 02 Jul 2025 14:47:13 GMT</pubDate>
    </item>
    <item>
      <title>如何在几分钟内构建WhatsApp流动 - 不是几天</title>
      <link>https://www.reddit.com/r/programming/comments/1lpxhah/how_to_build_whatsapp_flows_in_minutes_not_days/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/infobip       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpxhah/how_to_build_whatsapp_flows_in_minutes_not_days/</guid>
      <pubDate>Wed, 02 Jul 2025 14:35:37 GMT</pubDate>
    </item>
    <item>
      <title>SQL加入：击败怪物！</title>
      <link>https://www.reddit.com/r/programming/comments/1lpxdpj/sql_joins_defeat_the_monster/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/mehdifarsi      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpxdpj/sql_joins_defeat_the_monster/</guid>
      <pubDate>Wed, 02 Jul 2025 14:31:40 GMT</pubDate>
    </item>
    <item>
      <title>我在启动附带项目时要记住的原则</title>
      <link>https://www.reddit.com/r/programming/comments/1lpx75u/principles_i_keep_in_mind_when_starting_a_side/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，伙计们！我的期望越符合项目，实际上就越容易完成它。无论是保持范围很小还是避免不必要的费用，都有一套良好的原则来指导我的附带项目，就像在探索未知区域时拥有地图一样重要。在这篇文章中，我分享每次启动附带项目时都要记住的五个原则。希望您喜欢它！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/rafaelcamargo     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpx75u/principles_i_keep_in_mind_when_starting_a_side/</guid>
      <pubDate>Wed, 02 Jul 2025 14:24:23 GMT</pubDate>
    </item>
    <item>
      <title>我们刚刚在猫和鼠标游戏中删除了5个恶意NPM软件包</title>
      <link>https://www.reddit.com/r/programming/comments/1lpws1t/we_just_got_5_malicious_npm_packages_eliminated/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    Vet&gt; Vet 的创建者和维护者在这里。我们监视公共软件包注册表，执行代码分析以识别恶意软件包＆amp;  我们最近报告了一堆恶意的NPM软件包，这些软件包最终被包含在OSV中，现在希望所有SCA工具都可以识别和阻止这些工具。 NPM需要更长的时间，但也从注册表中删除了这些。    https://osv.dev.dev.dev.dev.dev.dev.dev/vulnerability/mal-202525-25-5248   href =“ https://osv.dev/vulnerability/mal-2025-5320”&gt; https://osv.dev.dev/vulnerability/mal-2025-5320      https://osv.dev/vulnerability/mal-2025-5168      https://osv.dev/vulnerability/mal-2025-5332     https://osv.dev/vulnerability/mal-2025-5333      我们已经这样做了一段时间。我们从简单的签名匹配开始，然后是静态代码分析，并最终动态分析。我们的系统正在变得复杂，消耗资源，并且像其他任何复杂的系统一样，很难扩展。但是我们看不出整个生态系统的任何改善。我们仍然看到每天发布的相同类型的恶意包裹。我敢肯定，我们尚未确定更复杂的问题。 直觉上，这似乎是2000年初的问题，任何人都会在各种 freeware 下载网站中上传恶意可执行文件。最终，AV和OS生态系统在采用签名的可执行文件，端点保护等方面改善了，通过恶意开源软件包，攻击转向开发人员，利用在信任，Java，Python，Python等值得信赖的过程中运行的更高级别的脚本语言。提交由＆＃32; /u/u/u/n1ghtcod3r      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpws1t/we_just_got_5_malicious_npm_packages_eliminated/</guid>
      <pubDate>Wed, 02 Jul 2025 14:07:02 GMT</pubDate>
    </item>
    <item>
      <title>我宣布平台工程死亡。在PlatformCon。</title>
      <link>https://www.reddit.com/r/programming/comments/1lpwnv3/i_declared_platform_engineering_dead_at/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/vladaionescu      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpwnv3/i_declared_platform_engineering_dead_at/</guid>
      <pubDate>Wed, 02 Jul 2025 14:02:12 GMT</pubDate>
    </item>
    <item>
      <title>20年的编程</title>
      <link>https://www.reddit.com/r/programming/comments/1lpvhn4/20_years_of_programming/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/xaneris47      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpvhn4/20_years_of_programming/</guid>
      <pubDate>Wed, 02 Jul 2025 13:11:33 GMT</pubDate>
    </item>
    <item>
      <title>2025年必须阅读的十大数据工程研究论文</title>
      <link>https://www.reddit.com/r/programming/comments/1lpvfhi/top_10_data_engineering_research_papers_that_are/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/subhanhg       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpvfhi/top_10_data_engineering_research_papers_that_are/</guid>
      <pubDate>Wed, 02 Jul 2025 13:08:55 GMT</pubDate>
    </item>
    <item>
      <title>开源：AgentCheck  - 快照和重播AI代理，例如真实软件</title>
      <link>https://www.reddit.com/r/programming/comments/1lpv224/open_source_agentcheck_snapshot_replay_ai_agents/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我已经构建了一个轻巧的开放式Python库，可以让您：  记录完整的LLM代理运行（输入，输出，工具调用） 在本地重新播放APIS    -  li&gt;     pytest 或 vcr.py ）  它求解了一个痛苦的间隙：大多数AI应用程序无法确定性地测试，而小提示/工具更改无声地破坏内容。  no saaS ui，saaS  -  saaS  -  saaS -saaS – saaS – saaS – just snapshot snapshot files and cli fifffif fiffif fiffif fiffif fiffif fiefing filefing fiffif。  喜欢反馈或合作者！   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/ucky_animal_7464        [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpv224/open_source_agentcheck_snapshot_replay_ai_agents/</guid>
      <pubDate>Wed, 02 Jul 2025 12:52:23 GMT</pubDate>
    </item>
    <item>
      <title>安全研究人员通过在Github上找到所谓的“删除提交”中的秘密来赚取25,000美元，表明他们并未真正删除</title>
      <link>https://www.reddit.com/r/programming/comments/1lpun8i/security_researcher_earns_25k_by_finding_secrets/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/scottcontini      ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lpun8i/security_researcher_earns_25k_by_finding_secrets/</guid>
      <pubDate>Wed, 02 Jul 2025 12:32:50 GMT</pubDate>
    </item>
    <item>
      <title>审查他人的AI PRS</title>
      <link>https://www.reddit.com/r/programming/comments/1lptuce/reviewing_others_ai_prs/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/ameatmuncher_not_gay        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lptuce/reviewing_others_ai_prs/</guid>
      <pubDate>Wed, 02 Jul 2025 11:52:55 GMT</pubDate>
    </item>
    <item>
      <title>指南及时工程</title>
      <link>https://www.reddit.com/r/programming/comments/1lptsh0/guide_to_prompt_engineering/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/gregorojstersek      [comment]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lptsh0/guide_to_prompt_engineering/</guid>
      <pubDate>Wed, 02 Jul 2025 11:50:15 GMT</pubDate>
    </item>
    <item>
      <title>我在C ++中构建了一个5MB cron</title>
      <link>https://www.reddit.com/r/programming/comments/1lptot1/i_built_a_5mb_cron_in_c/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  标准克隆使用20MB+ RAM，而不是为容器设计的。 My C++ alternative uses only 5MB, has structured logging, prevents hanging jobs, and is actually easier to configure (NO external library). The Problem with Standard Cron in Containers:  Consumes 15-20MB RAM + spawns multiple processes Cryptic configuration syntax (0 */4 * * * anyone?) Basic logging that tells you nothing useful Not designed for containerized environments Jobs can hang indefinitely  My Solution - ChronoCraft: Instead of: 0 23 * * * /path/to/cleanup.My syntax: {23, 0，Cronfrequency :: Daily，0，0，0，; config   - 不再需要谷歌搜索cron语法  结构化ligging 具有执行时间和适当的错误处理     auto timoout   - 作业无法悬挂您的系统        给我一​​个反馈！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/giuseppe_puleri       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lptot1/i_built_a_5mb_cron_in_c/</guid>
      <pubDate>Wed, 02 Jul 2025 11:45:05 GMT</pubDate>
    </item>
    </channel>
</rss>