<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 27 Aug 2025 06:28:43 GMT</lastBuildDate>
    <item>
      <title>Langchain开源分析：了解读数和第一步</title>
      <link>https://www.reddit.com/r/programming/comments/1n19jo1/langchain_open_source_analysis_understanding_the/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我正在尝试一种博客格式，在该格式中，我以一种非常简单的方式分解开源项目 - 从他们的回教徒开始，然后进入代码。第一篇文章是关于 langchain 。我希望来自对开源分析感兴趣的其他人的反馈，我也向未来项目的建议愿意。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/user/programmirowanie/comments/1n180yl/langchain/langchain_open_source_analsisy_understanding_the/&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n19jo1/langchain_open_source_analysis_understanding_the/</guid>
      <pubDate>Wed, 27 Aug 2025 06:25:58 GMT</pubDate>
    </item>
    <item>
      <title>打字稿食谱•Stefan Baumgartner和PeterKröner[播客]</title>
      <link>https://www.reddit.com/r/programming/comments/1n19f0p/typescript_cookbook_stefan_baumgartner_peter/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con     link&gt; link&gt; link&gt;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n19f0p/typescript_cookbook_stefan_baumgartner_peter/</guid>
      <pubDate>Wed, 27 Aug 2025 06:17:53 GMT</pubDate>
    </item>
    <item>
      <title>使用抽象语法树（ASTS）以使LLM可以通过外科手术更改狭窄的代码更改 - 没有提示进行差异或重新编写整个文件。为了更改现有代码，LLMS应修改程序的结构，而不是源代码的原始文本。</title>
      <link>https://www.reddit.com/r/programming/comments/1n193qv/on_using_abstract_syntax_trees_asts_so_that_llms/</link>
      <description><![CDATA[＆＃32;提交由＆＃32;态href =“ https://codeplusequalsai.com/static/blog/prompting_llms_to_to_modify_existing_code_uside_asts.html”&gt; [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n193qv/on_using_abstract_syntax_trees_asts_so_that_llms/</guid>
      <pubDate>Wed, 27 Aug 2025 05:58:16 GMT</pubDate>
    </item>
    <item>
      <title>MCP服务器不能成为未来，对吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1n17vn1/mcp_servers_cant_be_the_future_can_they/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  据我了解，MCP服务器就像是一个非常糟糕的倾斜的RPC协议，该协议可以使LLMS与其他系统进行交互。 因此，我们只是在本地运行数十个或数百个MCP服务器，以访问所有工具，以访问所有工具？这不可能是AI Hypers认为未来的情况，是吗？我们将燃烧GPU周期，而不仅仅是用PSQL进行数据库调用？这不能是……  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/kaboozie     link link&gt; link&gt; link&gt;     [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n17vn1/mcp_servers_cant_be_the_future_can_they/</guid>
      <pubDate>Wed, 27 Aug 2025 04:44:55 GMT</pubDate>
    </item>
    <item>
      <title>NX构建系统在供应链攻击中受到损害</title>
      <link>https://www.reddit.com/r/programming/comments/1n17fsz/nx_build_system_compromised_in_supply_chain_attack/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   nx构建系统在供应链攻击中受到损害。通过将凭据和系统信息进行靶向开发人员。 报告： https：// https：//github.com.com.com.com.com/nrwl/nx/nx/nx/nx/sissues/sissues/325222222 /u/u/u/n1ghtcod3r      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n17fsz/nx_build_system_compromised_in_supply_chain_attack/</guid>
      <pubDate>Wed, 27 Aug 2025 04:20:09 GMT</pubDate>
    </item>
    <item>
      <title>API设计101：从基础到最佳实践</title>
      <link>https://www.reddit.com/r/programming/comments/1n14rzg/api_design_101_from_basics_to_best_practices/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/javinpaul     ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n14rzg/api_design_101_from_basics_to_best_practices/</guid>
      <pubDate>Wed, 27 Aug 2025 02:06:20 GMT</pubDate>
    </item>
    <item>
      <title>40年后，新算法优于Dijkstra！</title>
      <link>https://www.reddit.com/r/programming/comments/1n13gpp/new_algorithm_outperforms_dijkstra_after_40_years/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  编辑：链接到文章 https：//arxiv.org/abs/2504.170333  https：//arxiv.org.org/abs/2504.17033 网络）由Dijkstra风格的算法主导，总是击中排序瓶颈。   Tsinghua University的一名研究团队刚刚出版了一个突破：他们建立了 新的最短路径算法， 避免完全分类，从而破坏了自1980年代以来不可能的理论障碍。  关键想法： - 在层次中工作而不是严格订购  - 选择  - 挑选代表性枢轴（clusters），而不是对每个节点进行分类  - 使用一些Bellman – Ford -ford -style spectapation -Ford -style spectance  in   -   in  log&gt; log&gt; o（m log&gt; o）任何基于排序的方法 它只是赢得了最佳纸 @ stoc（顶级CS理论会议之一）。链接到文章： 36Kr prever/&gt; pp        想想：  - 这会改变我们如何教算法的方式吗？ - 或者现在更像是“仅理论”的里程碑？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/biltious-page-5737      &lt;a href =“ https://www.reddit.com/r/programming/comments/1n13gpp/new_algorithm_outperforms_dijkstra_fter_after_40_years/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n13gpp/new_algorithm_outperforms_dijkstra_after_40_years/</guid>
      <pubDate>Wed, 27 Aug 2025 01:04:35 GMT</pubDate>
    </item>
    <item>
      <title>为什么我拒绝您的AI产生的MR</title>
      <link>https://www.reddit.com/r/programming/comments/1n12fdr/why_im_declining_your_ai_generated_mr/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/zulban      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n12fdr/why_im_declining_your_ai_generated_mr/</guid>
      <pubDate>Wed, 27 Aug 2025 00:16:20 GMT</pubDate>
    </item>
    <item>
      <title>开发人员最被低估的技能是什么？</title>
      <link>https://www.reddit.com/r/programming/comments/1n128ih/whats_the_most_underrated_skill_for_developers/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  每当我看到开发技能清单时，它都充满了框架，语言和算法。 这些都很重要。但是，以我的经验，真正向前迈进的项目的技能通常越来越柔和。 对我来说，最被低估的是清晰的交流。 我看到的项目不是因为代码不好，而是因为不明确的要求，误解的优先次数，或者是在团队成员之间简单的一致性。返工。   预防“隐藏”范围蠕变。    有助于弥合技术和非技术利益相关者之间的差距。      ，您认为开发人员不足以谈论的是什么技能？提交由＆＃32; /u/u/altruistic-nose447     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n128ih/whats_the_most_underrated_skill_for_developers/</guid>
      <pubDate>Wed, 27 Aug 2025 00:07:35 GMT</pubDate>
    </item>
    <item>
      <title>许多人讨厌面向对象的编程。但是一些初级程序员似乎大部分都在回应他们听到的经验丰富的程序员所说的话。在这篇博客文章中，我试图给出“不太极端”的观点，并鼓励人们自己思考。</title>
      <link>https://www.reddit.com/r/programming/comments/1n11tps/many_hate_on_objectoriented_programming_but_some/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/karlzylinski      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n11tps/many_hate_on_objectoriented_programming_but_some/</guid>
      <pubDate>Tue, 26 Aug 2025 23:49:09 GMT</pubDate>
    </item>
    <item>
      <title>Deezpatch v1.0.0发布</title>
      <link>https://www.reddit.com/r/programming/comments/1n117vj/deezpatch_v100_released/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   i刚刚发布了我一直在研究的开源java库的v1.0.0，我一直在工作：    这是一个简单的，无反思的请求/事件派遣库，专注于性能。如果您正在处理应用程序中的酒吧/子或域活动，并且想要轻巧和快速的事物，那么这可能值得一看。   &lt;高性能调度（repo中包含的基准）      api  li&gt; li&gt; li&gt; li&gt; li&gt; li&gt; li&gt; li&gt; li&gt; li&gt;  &lt;强&gt;   这是一个有趣的方面项目，我认为它已经准备好让其他人尝试。如果您觉得有趣的话，反馈，建议，甚至只是星星 - 都赞赏！ 基准：  java 11结果： https://jmh.morethan.io/?source=https://raw.githubusercontent.com/joel-jeremy/deezpatch/main/main/dee Zpatch-core/src/jmh/java/io/github/joeljeremy/deezpatch/core/benchmarks/resuct-java11.json11.json   Java 17结果： https://jmh.morethan.io/?source=https://raw.githubusercontent.com/joel-jeremy/deezpatch/main/main/deez补丁核/src/jmh/java/io/github/joeljeremy/deezpatch/core/benchmarks/resuse-java17.json     &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/jeyjeyemem       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n117vj/deezpatch_v100_released/</guid>
      <pubDate>Tue, 26 Aug 2025 23:22:31 GMT</pubDate>
    </item>
    <item>
      <title>让我们做游戏吧！ 314：新敌人</title>
      <link>https://www.reddit.com/r/programming/comments/1n0umlh/lets_make_a_game_314_the_new_enemy/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/apeloverage       [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0umlh/lets_make_a_game_314_the_new_enemy/</guid>
      <pubDate>Tue, 26 Aug 2025 19:01:00 GMT</pubDate>
    </item>
    <item>
      <title>[文章/手册]“为信心进行设计”  - 单位测试的3部分手册！</title>
      <link>https://www.reddit.com/r/programming/comments/1n0t0dm/articlehandbook_engineered_for_confidence_a_3/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿 r/programming ！ 我最近完成了一本三部分手册，以自信为＆quot，并想与大家分享。 它是作为内部文档开始标准化我们团队的单位测试实践的。但是，正如我写的那样，我意识到大多数指南都专注于“如何quot”并完全跳过“为什么”  是什么。快速，可靠和值得信赖的单元测试。 第2部分：可测试的体系结构：编写易于测试的代码的实用模式（使用DI，合同等）。 第3部分：全队范围的标准：可行的建议：可行的建议，以进行命名的惯例，测试组织，避免使用健康的测试和 它是完全免费的。我渴望听到您的想法并收到社区的反馈。谢谢！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/gil99915     [link]    [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0t0dm/articlehandbook_engineered_for_confidence_a_3/</guid>
      <pubDate>Tue, 26 Aug 2025 17:59:25 GMT</pubDate>
    </item>
    <item>
      <title>TLS加速的演变：从用户空间到智能NIC卸载</title>
      <link>https://www.reddit.com/r/programming/comments/1n0sebt/evolution_of_tls_acceleration_from_userspace_to/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  比较六代TLS加速度，从openssl cli hack等早期用户空间方法到现代的nic TLS卸载与核TLS和Quic。提交由＆＃32; /u/u/mqian41      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0sebt/evolution_of_tls_acceleration_from_userspace_to/</guid>
      <pubDate>Tue, 26 Aug 2025 17:36:42 GMT</pubDate>
    </item>
    <item>
      <title>我如何为Prisma构建模拟数据生成器（以及我所遇到的挑战）</title>
      <link>https://www.reddit.com/r/programming/comments/1n0rvxt/how_i_built_a_schemaaware_mock_data_generator_for/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  模拟数据生成通常很容易 - 但是一旦添加关系和约束，事情就会很快变得复杂。 在过去的几周中，我一直在开发一个自动从Prisma schema中直接生成模拟数据的CLI工具。我的主要目标是使其“构图了解”，因此生成的数据尊重用户→post→评论。 这是我遇到的三个最困难的问题以及我如何解决它们：  1。循环关系 示例：  型号用户{id int u/id @default（autoincrement（））post post post []}模型post {id int @id @default（autoincrement（autoincrement（autoincrement（））反复出现，您最终会获得无限嵌套：用户→发布→用户→帖子…  解决方案： 我实现了深度限制器。关系将生成可配置的  - 深度，除此之外，参考文献被“链接”而不是扩展。这样，您仍然可以在不爆炸数据集的情况下具有逼真的连接。  2。 Seeding Consistency When testing, you want the same seed to always produce the same dataset. Faker.js (or similar libs) generate random but not stable outputs by default. Solution: I wrapped faker with a seeded RNG so you can run: mocktail - 模型用户 - 计数10-种子123   ，并始终获得相同的10个用户。这使得测试确定性。  3。解析Prisma schemas   Prisma的模式格式很容易阅读，但是强大的解析更棘手。 I didn’t want to rely on undocumented Prisma internals. Solution: I built a lightweight parser that extracts:  Models and their fields Relations (1:1, 1:N, M:N) Constraints (e.g. @unique, @id)  This lets the generator understand the schema structure and produce valid data without touching the database. Why I’m sharing this I thought this might interest folks here because it touches on:  Recursive data generation Handling circular references in graphs Building确定性生成器 解析特定的语言（Prisma架构格式）  如果您构建了类似的东西（例如，对于诸如续集，typeorm等的ORMS（例如，我都希望您如何接近 frincation flatike 进入：   https://github.com/mocklo/mocktail-cli  提交由＆＃32; /u/u/u/latter_mechanic1690      ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n0rvxt/how_i_built_a_schemaaware_mock_data_generator_for/</guid>
      <pubDate>Tue, 26 Aug 2025 17:17:50 GMT</pubDate>
    </item>
    </channel>
</rss>