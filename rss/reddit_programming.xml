<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Thu, 03 Jul 2025 15:21:36 GMT</lastBuildDate>
    <item>
      <title>MongoDB模式验证：实践指南</title>
      <link>https://www.reddit.com/r/programming/comments/1lqs90i/mongodb_schema_validation_a_practical_guide_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/majestic_wallaby7374       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqs90i/mongodb_schema_validation_a_practical_guide_with/</guid>
      <pubDate>Thu, 03 Jul 2025 15:19:03 GMT</pubDate>
    </item>
    <item>
      <title>我们如何重构10,000+ I18N通话网站而不破坏生产</title>
      <link>https://www.reddit.com/r/programming/comments/1lqs6a3/how_we_refactored_10000_i18n_call_sites_without/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   Patreon的前端平台团队最近大修了我们的国际化系统 - 迁移每个翻译呼叫，转换供应商并删除片状构建依赖性。随着这种迁移，我们将捆绑尺寸削减了近50％，并将我们的构建时间删除了整整一分钟。 这是我们的做法，以及我们在此过程中了解到的有关全球规模的重构的知识：   https://www.patreon.com/posts/133137028 提交由＆＃32; /u/u/u/patreon-eng      &lt;a href =“ https://www.reddit.com/r/programming/comments/1lqs6a3/how_we_we_refactored_10000_i18n_call_sites_sites_without/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqs6a3/how_we_refactored_10000_i18n_call_sites_without/</guid>
      <pubDate>Thu, 03 Jul 2025 15:15:58 GMT</pubDate>
    </item>
    <item>
      <title>系统设计101</title>
      <link>https://www.reddit.com/r/programming/comments/1lqs68n/system_design_101/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/summerrise1905      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqs68n/system_design_101/</guid>
      <pubDate>Thu, 03 Jul 2025 15:15:56 GMT</pubDate>
    </item>
    <item>
      <title>Linux内核中的Higgs-Bugson</title>
      <link>https://www.reddit.com/r/programming/comments/1lqs3m1/a_higgsbugson_in_the_linux_kernel/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/u/breweddoritos      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqs3m1/a_higgsbugson_in_the_linux_kernel/</guid>
      <pubDate>Thu, 03 Jul 2025 15:13:00 GMT</pubDate>
    </item>
    <item>
      <title>对记事本++安装程序的特权升级</title>
      <link>https://www.reddit.com/r/programming/comments/1lqrlq4/privilege_escalation_over_notepad_installer/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/worth_trust_3825      ＆＃32;   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqrlq4/privilege_escalation_over_notepad_installer/</guid>
      <pubDate>Thu, 03 Jul 2025 14:53:13 GMT</pubDate>
    </item>
    <item>
      <title>在我的客厅中构建了Google的搜索算法</title>
      <link>https://www.reddit.com/r/programming/comments/1lqr5am/built_googles_search_algorithm_in_my_living_room/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;      从一个简单的问题开始：“ Google搜索数十亿页的毫秒？” Turns out it&#39;s not magic—it&#39;s beautiful mathematics and engineering. What I built: 4-node distributed search system using consistent hashing, parallel query coordination, and fault-tolerant architecture. What I learned:  Hash rings are pure mathematical elegance for data distribution Netflix每天使用这些确切模式进行500亿个事件 “散布总结”分布式系统中到处都有模式 生产系统并不复杂 - 它们更好地设计了   突破时刻：同时观看我的搜索查询击中了4个机器，并合并了47ms的结果。 Google使用的模式相同，只是较小的规模。  对于任何对分布式系统感到好奇的人：这些东西是可以学习的。不是“博士学位论文”复杂的 - 正常应用的计算机科学基础。  代码，测试和自动化脚本包括。没有绒毛，只有您实际上可以使用的生产模式。 值得检查是否曾经想知道您是否想知道大型科技公司实际上是如何构建其基础架构的。   &lt;！提交由＆＃32; /u/u/u/uverd_limit_247      ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqr5am/built_googles_search_algorithm_in_my_living_room/</guid>
      <pubDate>Thu, 03 Jul 2025 14:34:40 GMT</pubDate>
    </item>
    <item>
      <title>项目所需的帮助</title>
      <link>https://www.reddit.com/r/programming/comments/1lqqiaf/help_needed_for_project/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好，我正在为水过滤厂制作计费产品。我一般没有足够的技能或编程技能，我尝试与光标合作，但是它之后变得复杂并失去了轨道。现在，我计划在Golang或Python中从头开始，我想让基本的数据模型，代码和DB架构进行基本的数据模型和DB架构，这就是我需要帮助的地方，也许在Cursor之后可以在SUPASE上进行plans in SUPASE obs supabase ins supabase。我已经在PDF中解释了该项目。   &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/majestic_tip_6262      [link]    [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqqiaf/help_needed_for_project/</guid>
      <pubDate>Thu, 03 Jul 2025 14:07:43 GMT</pubDate>
    </item>
    <item>
      <title>锈病研究</title>
      <link>https://www.reddit.com/r/programming/comments/1lqqfwz/rust_case_studies/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/mooreds       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqqfwz/rust_case_studies/</guid>
      <pubDate>Thu, 03 Jul 2025 14:04:49 GMT</pubDate>
    </item>
    <item>
      <title>有没有想过AWS S3量表如何处理1 Pb/s带宽？我在一篇深度文章中打破了他们的关键设计决策</title>
      <link>https://www.reddit.com/r/programming/comments/1lqqbss/ever_wondered_how_aws_s3_scales_to_handle_1_pbs/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  作为工程师，我们花费大量时间来弄清楚如何自动化应用程序以满足用户需求。我们设计了分布式系统，以动态扩展和收缩以确保无缝的服务。但是，在此过程中，我们成为客户 - 诸如AWS，GCP或Azure  之类的基础云服务，使我想到： s3 或任何此类云服务如何    是分布式系统的粉丝，但可以更好地理解出色的设计决策，经过战斗的模式和基本原理  在场景后面的力量S3。 某些亮点：     s3如何在如此庞大的规模 设计下，以确保他们能够确保 li&gt; 如何确保可用性和规模的一致性 他们为增强功能的一些简单但巧妙的调整    shuffle sharding sharding and aptioning smook smooker smooth    的隐藏作用会喜欢您的反馈或对我可能会错过或误解的内容。    href=&quot;https://premeaswaran.substack.com/p/beyond-the-bucket-design-decisions&quot;&gt;https://premeaswaran.substack.com/p/beyond-the-bucket-design-decisions (And yes, this was a fun excuse to nerd out over storage internals.)  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/untrepid_macaroon_92       [link]   ＆＃32;  &lt;a href =“ https://www.reddit.com/r/programming/comments/1lqqbbss/1lqqbbss/ever_wondered_how_how_aws_s3_scales_scales_to_handle_handle_1_pbs/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqqbss/ever_wondered_how_aws_s3_scales_to_handle_1_pbs/</guid>
      <pubDate>Thu, 03 Jul 2025 14:00:05 GMT</pubDate>
    </item>
    <item>
      <title>Node.js采访问答：第16天</title>
      <link>https://www.reddit.com/r/programming/comments/1lqq6x3/nodejs_interview_qa_day_16/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/myssiriouseye8494     [link]  ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqq6x3/nodejs_interview_qa_day_16/</guid>
      <pubDate>Thu, 03 Jul 2025 13:54:12 GMT</pubDate>
    </item>
    <item>
      <title>与Python建立了CLI习惯追踪器</title>
      <link>https://www.reddit.com/r/programming/comments/1lqpxd2/built_a_cli_habit_tracker_with_python/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我刚刚开始制作开发项目，大声笑，刚刚发布了我的第一个项目： habtpy，它适合那些想要保持一致的人，而不会跳入膨胀的应用程序或GUIS或GUIS。 I wanted something lightweight but still functional. Core features:  Log daily and weekly, montly, whatever habits. Create, view, or delete custom habits Generate progress graphs (week, month, year) Export all your data to CSV for further use Random激励性消息使它保持有趣 重置所有内容，并在需要时开始新鲜  您可以通过PIP     pip安装pip install abtinpy abotpy == 0.1.1.1.1.13   有关另一种安装方法，请参见Repository      &lt;！提交由＆＃32; /u/u/u/antique-question2460      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqpxd2/built_a_cli_habit_tracker_with_python/</guid>
      <pubDate>Thu, 03 Jul 2025 13:42:29 GMT</pubDate>
    </item>
    <item>
      <title>调试书•Andreas Zeller＆Clare Sudbery</title>
      <link>https://www.reddit.com/r/programming/comments/1lqp9me/the_debugging_book_andreas_zeller_clare_sudbery/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqp9me/the_debugging_book_andreas_zeller_clare_sudbery/</guid>
      <pubDate>Thu, 03 Jul 2025 13:13:15 GMT</pubDate>
    </item>
    <item>
      <title>什么是vo链接？</title>
      <link>https://www.reddit.com/r/programming/comments/1lqp372/what_is_a_vo_link/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我看到youtube简短。感谢您的帮助！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/-silly-questions       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqp372/what_is_a_vo_link/</guid>
      <pubDate>Thu, 03 Jul 2025 13:05:03 GMT</pubDate>
    </item>
    <item>
      <title>[OSS] [COMPLAR]建立AI-NATIANIT项目管理工具 - 寻找贡献者</title>
      <link>https://www.reddit.com/r/programming/comments/1lqox4n/osscollab_building_an_ainative_project_management/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿，我一直在开发一种名为 projin 的开放式项目管理工具 - 它是为开发团队而建造的，目的是 实际上是 实际上是任务计划，上下文工作，上下文和分散的工作。目的是构建一种感觉像是完全开放的，开发优先的替代品，用于当前关闭的，肿的PM工具。思考：→自然语言任务创建→自动积压梳理→团队见解→AI驱动的冲刺计划氛围是：干净，快速，对黑客友好。它仍处于早期阶段 - 核心结构，MonorePo设置，基本UI和所有无聊的基础内容。  Drizzle Orm + Postgresql   我要寻找的是： 不是公司。不付费。只是一个带有热情项目的OSS项目。我正在寻找：  属于Ai-Native工具，并想建立真实的东西，而不是另一个侧面玩具 可以始终如一地承担（每周 usp），一个大&gt;          学生建立了一个强大的github个人资料 人们厌倦了另一个todo app  独立黑客想共同构建一个我们所有人都需要的工具   ，他们只是喜欢在公共场所建立凉爽的     它仍然很早就结构化了。我正在尝试建立一个小的紧密联系的船员，而不是100个随机人员。如果这听起来很有趣，请发表评论或DM我。让我们让项目管理少  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/sandibi13       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqox4n/osscollab_building_an_ainative_project_management/</guid>
      <pubDate>Thu, 03 Jul 2025 12:57:33 GMT</pubDate>
    </item>
    <item>
      <title>使用Ollama，Langgraph和简化建立一个多代理AI投资顾问</title>
      <link>https://www.reddit.com/r/programming/comments/1lqose4/build_a_multiagent_ai_investment_advisor_using/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/flacky-thought-5472      [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1lqose4/build_a_multiagent_ai_investment_advisor_using/</guid>
      <pubDate>Thu, 03 Jul 2025 12:51:12 GMT</pubDate>
    </item>
    </channel>
</rss>