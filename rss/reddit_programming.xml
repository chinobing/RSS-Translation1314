<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 08 Oct 2025 09:20:37 GMT</lastBuildDate>
    <item>
      <title>Codefinity 是学习编码的合法平台吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1o15n49/is_codefinity_a_legit_platform_for_learning_coding/</link>
      <description><![CDATA[ 由   提交/u/Ok-Hair-7518   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15n49/is_codefinity_a_legit_platform_for_learning_coding/</guid>
      <pubDate>Wed, 08 Oct 2025 09:18:56 GMT</pubDate>
    </item>
    <item>
      <title>Tsoding、Bison 和可能的替代方案</title>
      <link>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  因此，编程有影响力的人tsoding（我时不时地看的人）制作了有关Yacc，bison和其他解析工具的视频。显然，这是他系列的一部分，他进入了神秘而过时的GNU东西。要么做出替代方案，要取笑它，要么是两者兼而有之。 这是一件事...当我学会了语言理论时，他们使用野牛为我们提供了“现实生活”。使用语法的示例……至今我仍然使用它的工具。现在，我已经担心自己可能正在使用过时的工具，并且有更好的替代方案需要探索。 我还有某种方法可以完成视频，但是从我到目前为止，迄今为止的编码都没有提及任何更好或更现代的解析代码的方法。这导致我发布此信息... &lt; /p&gt; 您在每日底座上使用什么来制作语法 /解析代码？您在C /CPP中使用了什么？ python呢？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/nac_oh      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o15f77/tsoding_bison_and_possible_alternatives/</guid>
      <pubDate>Wed, 08 Oct 2025 09:04:09 GMT</pubDate>
    </item>
    <item>
      <title>使用 Tauri 构建可视化 Docker 数据库管理器</title>
      <link>https://www.reddit.com/r/programming/comments/1o1398z/built_a_visual_docker_database_manager_with_tauri/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  嘿👋-solo dev。 Just launched Docker DB Manager, a desktop app built with Tauri v2 and React. The problem: Managing database containers across projects got tedious—constantly checking available ports, recreating containers to change settings, and hunting for passwords across .env files and notes. What it does:  Create and manage containers without terminal commands Detects port conflicts before creating containers Edit configuration (ports, names) without manual recreation Generates ready-to-copy connection strings Syncs with Docker Desktop in real-time  Currently supports PostgreSQL, MySQL, redis和mongodb（更多数据库来了）。 是开源，我很喜欢您的反馈：  github：  https://github.com/abians/docker-db-manager    可用于MacOS（Apple Silicon + Intel）。 Windows和Linux即将推出。 很高兴回答有关架构或实施的问题！ 🚀  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/zukonsio     &lt;a href =“ https://www.reddit.com/r/programming/comments/1o1398z/built_a_a_visual_visual_database_database_manager_with_with_with_with_with_with_with_tauri/”]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o1398z/built_a_visual_docker_database_manager_with_tauri/</guid>
      <pubDate>Wed, 08 Oct 2025 06:42:45 GMT</pubDate>
    </item>
    <item>
      <title>2025年学习的20个最难至最简单的编程语言排名|比兹米亚</title>
      <link>https://www.reddit.com/r/programming/comments/1o12xcz/20_hardest_to_easiest_rankings_of_programming/</link>
      <description><![CDATA[BIZMIA 评选的 2025 年开发者最难学习的 20 种编程语言。   由   提交/u/waozen   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o12xcz/20_hardest_to_easiest_rankings_of_programming/</guid>
      <pubDate>Wed, 08 Oct 2025 06:22:27 GMT</pubDate>
    </item>
    <item>
      <title>CSS有42个单位</title>
      <link>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</link>
      <description><![CDATA[ 由   提交 /u/harromeister   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o12gps/css_has_42_units/</guid>
      <pubDate>Wed, 08 Oct 2025 05:54:07 GMT</pubDate>
    </item>
    <item>
      <title>十年前的一堂课中的代码，因为统一不起作用（显然）</title>
      <link>https://www.reddit.com/r/programming/comments/1o126jj/code_from_a_lesson_a_decade_ago_for_unity_not/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大家好，我正在关注有关2014年从2014年起关于Unity的游戏开发的课程？无论如何，此代码的目的是增加X偏移量 - 材料四元对象。编译没有错误，但不会改变启动时X偏移。这些数字至少在脚本上仍在增加。材料不受影响。我正在使用Unity 2022。代码有任何问题吗？另外，我并不是真的在Reddit上发布，我对发布的URL要求是lmao完全一无所知。 I just copied and pasted the page I was on at time of posting. using UnityEngine; using System.Collections; public class TextureOffsetAnimator1 : MonoBehaviour { public Vector2 ScrollSpeeds = new Vector2(0.0f, 0.0f);  public renderer targetRenderer = null;   // private  私人vector2 _offset =  vector2.zer.2.zer.zer.zer.zero ;        //首次在pr aft the morobe is efters per the monobe is efters per at have p. p ippation p.papt p. start（）  {  if（targetRenderer == null）  {  targetRenderer = getComponent＆lt; renderer＆gt;（） targetRenderer.material.getTextureOffset（&#39;_maintex＆quord;）;  }   } }    //更新一次是每个frage   void Updation（void Updation（） * time.deltatime;   targetRenderer.material.material.setTextureOffset（&#39;_maintex＆quot; _offset）;  } }    }      &lt;！提交由＆＃32;  /u/GRILL3DCHEESEBOB   [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o126jj/code_from_a_lesson_a_decade_ago_for_unity_not/</guid>
      <pubDate>Wed, 08 Oct 2025 05:36:39 GMT</pubDate>
    </item>
    <item>
      <title>重建世界计划</title>
      <link>https://www.reddit.com/r/programming/comments/1o114bv/rebuild_the_world_project/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    在死端时，从向后的一些步骤开始   一个新的网站，专用于当代的信息技术（尤其是编程）的当代退化倾向就弹出了。大多数主题涵盖了在那里对公众来说似乎是极为争议的，但是，在每个人身后拥有强大的理由，IMO，IMO，不应简单地忽略他们。提交由＆＃32; /u/u/surecoyote9650       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o114bv/rebuild_the_world_project/</guid>
      <pubDate>Wed, 08 Oct 2025 04:35:35 GMT</pubDate>
    </item>
    <item>
      <title>设计用于分支AI对话的SDK（Python + Typescript）</title>
      <link>https://www.reddit.com/r/programming/comments/1o110i0/designing_an_sdk_for_branching_ai_conversations/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  传统的AI聊天API是线性的 - 一条从头到尾的单个消息链。当我们开始尝试进行分支分支对话（任何消息都可以分叉到新路径中），出现了许多有趣的技术问题。 Graph 而不是列表，同时使其可查询和轻巧。  有效地维持上下文  - 确定分支是继承了完整的历史记录，部分历史记录，部分历史还是开始新鲜（我们将这些上下文模式称为完整/partial/none/none/none/none/none）。 Ensuring each branch has a real UUID (no “main” placeholder) so merges and references remain consistent later. Handling token limits and usage tracking across diverging branches.  The end result is a small cross-language SDK (Python + TypeScript) that abstracts these concerns away and exposes simple calls例如 对话。Create（）， branches.create（）和 message.stream（）。。 我写了一篇简短的技术文章，解释了我们如何完成这些设计决策以及我们在构建时如何完成的：    https://afzal.xyz/rethinking-ai-conversations-why-branching-beats-linear-thinking-85ed5cfd97f5   很想听听其他人如何建模相似的分支或树结构化对话系统，尤其是围绕有效维护上下文或可视化对话图。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/sleaktrade      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o110i0/designing_an_sdk_for_branching_ai_conversations/</guid>
      <pubDate>Wed, 08 Oct 2025 04:29:49 GMT</pubDate>
    </item>
    <item>
      <title>设计用于分支AI对话的SDK（Python + Typescript）</title>
      <link>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  传统的AI聊天API是线性的 - 从头到尾的一系列消息链。当我们开始尝试实验分支对话时（任何消息都可以分叉进入新路径），出现了许多有趣的技术问题。  有效地维护上下文 - 决定一个分支是否继承了完整的历史，部分历史或开始新鲜（我们将这些上下文模式称为完整/部分/局部/无）。 流式响应在多个分支之间同时进行流式响应，而在多个分支上跨多个分支中的订单不损坏的保证，请确保每个分支的一致性。 later. Handling token limits and usage tracking across diverging branches.  The end result is a small cross-language SDK (Python + TypeScript) that abstracts these concerns away and exposes simple calls like conversations.create(), branches.create(), and messages.stream(). I wrote a short technical post解释我们如何处理这些设计决策以及我们在构建它时学到的知识：  https://afzal.xyz/rethinking-ai-conversations-why-branching-beats-linear-thinking-85ed5cfd97f5   很想听听其他人如何建模相似的分支或树结构化对话系统，尤其是围绕有效维护上下文或可视化对话图。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/sleaktrade      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o10zkb/designing_an_sdk_for_branching_ai_conversations/</guid>
      <pubDate>Wed, 08 Oct 2025 04:28:24 GMT</pubDate>
    </item>
    <item>
      <title>钱德勒·卡鲁斯（Chandler Carruth）：生锈和碳均无生锈的记忆安全| RustConf 2025</title>
      <link>https://www.reddit.com/r/programming/comments/1o0vlzd/chandler_carruth_memory_safety_everywhere_with/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/bluegoliach      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0vlzd/chandler_carruth_memory_safety_everywhere_with/</guid>
      <pubDate>Wed, 08 Oct 2025 00:04:39 GMT</pubDate>
    </item>
    <item>
      <title>裸体检测、人工智能架构：我们如何在我的初创公司中解决它</title>
      <link>https://www.reddit.com/r/programming/comments/1o0v1mx/nudity_detection_ai_architecture_how_we_solved_it/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/trolleid     [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0v1mx/nudity_detection_ai_architecture_how_we_solved_it/</guid>
      <pubDate>Tue, 07 Oct 2025 23:39:38 GMT</pubDate>
    </item>
    <item>
      <title>可组合状态机：RTS游戏中的建筑可扩展单位行为</title>
      <link>https://www.reddit.com/r/programming/comments/1o0ukwq/composable_state_machines_building_scalable_unit/</link>
      <description><![CDATA[ 由   提交 /u/EgregorAmeriki   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0ukwq/composable_state_machines_building_scalable_unit/</guid>
      <pubDate>Tue, 07 Oct 2025 23:19:11 GMT</pubDate>
    </item>
    <item>
      <title>解释AI的决策树的童年游戏</title>
      <link>https://www.reddit.com/r/programming/comments/1o0t8ml/the_childhood_game_that_explains_ais_decision/</link>
      <description><![CDATA[一位工程师最近探索了经典棋盘游戏猜猜谁？揭示了人工智能决策树的底层逻辑。 在游戏中，玩家不会猜测 - 他们会提出提供最多信息的问题，系统地消除可能性，直到只剩下一个。这反映了机器学习中的决策树如何分割数据：每个“问题”（特征）旨在减少不确定性并创建更清晰的分区。 该项目在游戏的是/否机制和预测机器学习过程（例如特征选择和信息增益）之间建立了直接的相似之处。就像玩家可能会问“你的角色戴眼镜吗？”为了删除一半的选项，模型可能会问“血压高吗？”来完善其分类。 通过使用一个怀旧的视觉示例，工程师说明了如何理解简单游戏中的问题效率可以揭开人工智能模型如何学习以最少的步骤做出准确预测的神秘面纱。   由   提交/u/shift_devs  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0t8ml/the_childhood_game_that_explains_ais_decision/</guid>
      <pubDate>Tue, 07 Oct 2025 22:22:18 GMT</pubDate>
    </item>
    <item>
      <title>局部和时间空间假设</title>
      <link>https://www.reddit.com/r/programming/comments/1o0ov3x/locality_and_temporalspatial_hypothesis/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0ov3x/locality_and_temporalspatial_hypothesis/</guid>
      <pubDate>Tue, 07 Oct 2025 19:36:58 GMT</pubDate>
    </item>
    <item>
      <title>创始人的盲点杀死了初创企业</title>
      <link>https://www.reddit.com/r/programming/comments/1o0olp1/the_founders_blind_spot_that_kills_startups/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  大多数初创公司失败了，因为非技术创始人失去了产品的技术现实。了解“创始人的盲点”如何不受管理的技术债务导致灾难性失败。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/gamunu      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o0olp1/the_founders_blind_spot_that_kills_startups/</guid>
      <pubDate>Tue, 07 Oct 2025 19:27:12 GMT</pubDate>
    </item>
    </channel>
</rss>