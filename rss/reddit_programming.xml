<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 27 Aug 2025 09:20:34 GMT</lastBuildDate>
    <item>
      <title>向视口侦探打个招呼🕵️‍♂️  - 您的新搭档，以制作清洁，美丽和响应式设计。</title>
      <link>https://www.reddit.com/r/programming/comments/1n1boje/say_hello_to_viewport_detective_your_new_sidekick/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;    努力使您的Web UI像素完美？向视口侦探打个招呼🕵️‍♂️  - 您的新搭档，以制作清洁，美丽和响应式设计。无论您是刚开始还是已经进入前端游戏，此工具都可以支持。 🎨💻 👉给它一个旋转：🔗 https：//viewportdetective.vercel.app.app  href =“ https://viewdetect.vercel.app”&gt; https://viewdetect.vercel.app.app     💡欢迎贡献！您可以通过增强其功能和UI来帮助改善此网站。 🚀继续前进，您的UI应该得到一些爱💖  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/utdeveloperds       [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n1boje/say_hello_to_viewport_detective_your_new_sidekick/</guid>
      <pubDate>Wed, 27 Aug 2025 08:45:24 GMT</pubDate>
    </item>
    <item>
      <title>使用面向对象的编程的简单构建工具</title>
      <link>https://www.reddit.com/r/programming/comments/1n1at0d/simpler_build_tools_with_object_oriented/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/lihaoyi      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n1at0d/simpler_build_tools_with_object_oriented/</guid>
      <pubDate>Wed, 27 Aug 2025 07:46:39 GMT</pubDate>
    </item>
    <item>
      <title>AI代码编辑和2025年的助手</title>
      <link>https://www.reddit.com/r/programming/comments/1n1ar5a/ai_code_editors_and_assistants_for_2025/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我仍然是VS代码用户，但是我探索了AI代码编辑器在2025年的演变。最初AutoComplete的内容现在是完整的AI助手，可以重构，debug，debug，甚至计划功能。       &lt;！ -  sc_-sc_on-&gt;＆＃32222222222;提交由＆＃32; /u/u/u/michael_andreuzza     ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n1ar5a/ai_code_editors_and_assistants_for_2025/</guid>
      <pubDate>Wed, 27 Aug 2025 07:43:17 GMT</pubDate>
    </item>
    <item>
      <title>LeetCode帮助</title>
      <link>https://www.reddit.com/r/programming/comments/1n1ald1/leetcode_help/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  其他人知道这是否是leetcode 9的好例子？面试是可以接受的吗？还是太小  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/abal-mode6431       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n1ald1/leetcode_help/</guid>
      <pubDate>Wed, 27 Aug 2025 07:32:39 GMT</pubDate>
    </item>
    <item>
      <title>在Pure GO，生产LLM课程中构建AI系统</title>
      <link>https://www.reddit.com/r/programming/comments/1n1aijg/build_ai_systems_in_pure_go_production_llm_course/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/tosident_wing_9573        [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n1aijg/build_ai_systems_in_pure_go_production_llm_course/</guid>
      <pubDate>Wed, 27 Aug 2025 07:27:32 GMT</pubDate>
    </item>
    <item>
      <title>使用筛选方法计算10000中的质数表，是否有更简单的解决方案？</title>
      <link>https://www.reddit.com/r/programming/comments/1n1a2zn/calculate_prime_number_table_within_10000_using/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/vast_lab8278     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n1a2zn/calculate_prime_number_table_within_10000_using/</guid>
      <pubDate>Wed, 27 Aug 2025 07:00:01 GMT</pubDate>
    </item>
    <item>
      <title>Langchain开源分析：了解读数和第一步</title>
      <link>https://www.reddit.com/r/programming/comments/1n19jo1/langchain_open_source_analysis_understanding_the/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我正在尝试一种博客格式，在该格式中，我以一种非常简单的方式分解开源项目 - 从他们的回教徒开始，然后进入代码。第一篇文章是关于 langchain 。我希望来自对开源分析感兴趣的其他人的反馈，我也向未来项目的建议愿意。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32;态href =“ https://www.reddit.com/user/programmirowanie/comments/1n180yl/langchain/langchain_open_source_analsisy_understanding_the/&gt; [link]   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n19jo1/langchain_open_source_analysis_understanding_the/</guid>
      <pubDate>Wed, 27 Aug 2025 06:25:58 GMT</pubDate>
    </item>
    <item>
      <title>打字稿食谱•Stefan Baumgartner和PeterKröner[播客]</title>
      <link>https://www.reddit.com/r/programming/comments/1n19f0p/typescript_cookbook_stefan_baumgartner_peter/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/goto-con     link&gt; link&gt; link&gt;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n19f0p/typescript_cookbook_stefan_baumgartner_peter/</guid>
      <pubDate>Wed, 27 Aug 2025 06:17:53 GMT</pubDate>
    </item>
    <item>
      <title>MCP服务器不能成为未来，对吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1n17vn1/mcp_servers_cant_be_the_future_can_they/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  据我了解，MCP服务器就像是一个非常糟糕的倾斜的RPC协议，该协议可以使LLMS与其他系统进行交互。 因此，我们只是在本地运行数十个或数百个MCP服务器，以访问所有工具，以访问所有工具？这不可能是AI Hypers认为未来的情况，是吗？我们将燃烧GPU周期，而不仅仅是用PSQL进行数据库调用？这不能是……  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/kaboozie     link link&gt; link&gt; link&gt;     [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n17vn1/mcp_servers_cant_be_the_future_can_they/</guid>
      <pubDate>Wed, 27 Aug 2025 04:44:55 GMT</pubDate>
    </item>
    <item>
      <title>NX构建系统在供应链攻击中受到损害</title>
      <link>https://www.reddit.com/r/programming/comments/1n17fsz/nx_build_system_compromised_in_supply_chain_attack/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;   nx构建系统在供应链攻击中受到损害。通过将凭据和系统信息进行靶向开发人员。 报告： https：// https：//github.com.com.com.com.com/nrwl/nx/nx/nx/nx/sissues/sissues/325222222 /u/u/u/n1ghtcod3r      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n17fsz/nx_build_system_compromised_in_supply_chain_attack/</guid>
      <pubDate>Wed, 27 Aug 2025 04:20:09 GMT</pubDate>
    </item>
    <item>
      <title>API设计101：从基础到最佳实践</title>
      <link>https://www.reddit.com/r/programming/comments/1n14rzg/api_design_101_from_basics_to_best_practices/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/javinpaul     ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n14rzg/api_design_101_from_basics_to_best_practices/</guid>
      <pubDate>Wed, 27 Aug 2025 02:06:20 GMT</pubDate>
    </item>
    <item>
      <title>40年后，新算法优于Dijkstra！</title>
      <link>https://www.reddit.com/r/programming/comments/1n13gpp/new_algorithm_outperforms_dijkstra_after_40_years/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  编辑：链接到文章 https：//arxiv.org/abs/2504.170333  https：//arxiv.org.org/abs/2504.17033 网络）由Dijkstra风格的算法主导，总是击中排序瓶颈。   Tsinghua University的一名研究团队刚刚出版了一个突破：他们建立了 新的最短路径算法， 避免完全分类，从而破坏了自1980年代以来不可能的理论障碍。  关键想法： - 在层次中工作而不是严格订购  - 选择  - 挑选代表性枢轴（clusters），而不是对每个节点进行分类  - 使用一些Bellman – Ford -ford -style spectapation -Ford -style spectance  in   -   in  log&gt; log&gt; o（m log&gt; o）任何基于排序的方法 它只是赢得了最佳纸 @ stoc（顶级CS理论会议之一）。链接到文章： 36Kr prever/&gt; pp        想想：  - 这会改变我们如何教算法的方式吗？ - 或者现在更像是“仅理论”的里程碑？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/u/biltious-page-5737      &lt;a href =“ https://www.reddit.com/r/programming/comments/1n13gpp/new_algorithm_outperforms_dijkstra_fter_after_40_years/]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n13gpp/new_algorithm_outperforms_dijkstra_after_40_years/</guid>
      <pubDate>Wed, 27 Aug 2025 01:04:35 GMT</pubDate>
    </item>
    <item>
      <title>为什么我拒绝您的AI产生的MR</title>
      <link>https://www.reddit.com/r/programming/comments/1n12fdr/why_im_declining_your_ai_generated_mr/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/zulban      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n12fdr/why_im_declining_your_ai_generated_mr/</guid>
      <pubDate>Wed, 27 Aug 2025 00:16:20 GMT</pubDate>
    </item>
    <item>
      <title>开发人员最被低估的技能是什么？</title>
      <link>https://www.reddit.com/r/programming/comments/1n128ih/whats_the_most_underrated_skill_for_developers/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  每当我看到开发技能清单时，它都充满了框架，语言和算法。 这些都很重要。但是，以我的经验，真正向前迈进的项目的技能通常越来越柔和。 对我来说，最被低估的是清晰的交流。 我看到的项目不是因为代码不好，而是因为不明确的要求，误解的优先次数，或者是在团队成员之间简单的一致性。返工。   预防“隐藏”范围蠕变。    有助于弥合技术和非技术利益相关者之间的差距。      ，您认为开发人员不足以谈论的是什么技能？提交由＆＃32; /u/u/altruistic-nose447     [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n128ih/whats_the_most_underrated_skill_for_developers/</guid>
      <pubDate>Wed, 27 Aug 2025 00:07:35 GMT</pubDate>
    </item>
    <item>
      <title>许多人讨厌面向对象的编程。但是一些初级程序员似乎大部分都在回应他们听到的经验丰富的程序员所说的话。在这篇博客文章中，我试图给出“不太极端”的观点，并鼓励人们自己思考。</title>
      <link>https://www.reddit.com/r/programming/comments/1n11tps/many_hate_on_objectoriented_programming_but_some/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/karlzylinski      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1n11tps/many_hate_on_objectoriented_programming_but_some/</guid>
      <pubDate>Tue, 26 Aug 2025 23:49:09 GMT</pubDate>
    </item>
    </channel>
</rss>