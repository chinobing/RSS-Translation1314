<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 12 Sep 2025 12:36:32 GMT</lastBuildDate>
    <item>
      <title>跑步者技巧＃1</title>
      <link>https://www.reddit.com/r/programming/comments/1nf0s0d/runner_tricks_1/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  跑步者技巧＃1  网站： what the heck?  because you want to have full understanding of your app (how tasks and events are related, how listeners are related to the system, what side effects can happen on a complex workflow), and your AI assistant can with a query do wonderful things. because you want a beautiful documentation of your app and not have to work for it and it&#39;s not about documentation of your exposed api, it&#39;s about the inner胆量。  详细信息：   Runner-dev公开了一个GraphQl API，该API使您可以在单个GraphQl查询中获取所有资源（Singletons）/任务（业务功能），中间件（业务功能）。 This graphql server is of two types: dry run (can only see structure, relations and diagnostics) and the mcp/runner-dev one which open a http graphql server in which you can also see telemetry (logs, events emitted, tasks run, error happened) etc. all the data is tied together, you can get all errors, emittors, their dependencies and their file contents, no biggie.   show： ````````runner-dev查询&#39;query&#39;query {tasks {id，meta {title}}}&#39;-entry-file ./src/main.ts-pretty      { ＆quot; app.http.tasks.healthz’; quot; quot; }}，{; }}，{; }}，// ...  或尝试：  runner-dev查询&#39;query&#39;query {diagnostics {diagnostics {code message straile}}&#39;-entry-file ./src/main.ts-pretts-pretty-pretty i npm运行开发＃这将为您打开各种文档。正确的端点环境变量GraphQL曝光。现在，您可以在IDE/代码工具中使用它。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/theodordiaconu       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf0s0d/runner_tricks_1/</guid>
      <pubDate>Fri, 12 Sep 2025 11:35:00 GMT</pubDate>
    </item>
    <item>
      <title>看不见的角色花了我太多的调试时间</title>
      <link>https://www.reddit.com/r/programming/comments/1nf0dli/the_invisible_character_that_cost_me_too_much/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/ludovicianul      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf0dli/the_invisible_character_that_cost_me_too_much/</guid>
      <pubDate>Fri, 12 Sep 2025 11:13:46 GMT</pubDate>
    </item>
    <item>
      <title>Graph Rag Pipeline完全在本地使用Ollama运行，并具有完整的源归因</title>
      <link>https://www.reddit.com/r/programming/comments/1nf08e5/graph_rag_pipeline_that_runs_entirely_locally/</link>
      <description><![CDATA[Hey , I&#39;ve been deep in the world of local RAG and wanted to share a project I built, VeritasGraph, that&#39;s designed from the ground up for private, on-premise use with tools we all love. My setup uses Ollama with llama3.1 for generation and nomic-embed-text for embeddings.整个东西在我的计算机上运行而不会击中任何外部API。 主要目标是解决两个大问题： 多跳​​的推理：当您需要从不同文档连接事实时，标准向量抹布失败。 Veritasgraph构建了一个知识图来遍历这些关系。  Trust＆amp;验证：它为每个生成的语句提供了完整的源归因，因此您可以准确看到源文档的哪一部分用于构建答案。 我遇到（并已解决）的关键挑战之一是Ollama的默认上下文长度。我发现2048年的违约正在截断上下文并导致不良结果。该存储库包括一个具有12K上下文窗口的Llama3.1版本的途径，该版本完全解决了问题。 该项目包括： 完整的图形rag ragpipeline。  gradio ui用于交互式聊天体验。代码和说明： https://github.com/bibinprathap/veritasgraph    我真的很感兴趣地听到您的想法，尤其是在本地LLM上实施和提示。我敢肯定有可以进一步优化的方法。 谢谢！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/bitterhouse8234       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nf08e5/graph_rag_pipeline_that_runs_entirely_locally/</guid>
      <pubDate>Fri, 12 Sep 2025 11:05:49 GMT</pubDate>
    </item>
    <item>
      <title>使用AI（主要是LLM）的限制因素</title>
      <link>https://www.reddit.com/r/programming/comments/1nezpel/the_limiting_factor_in_using_ai_mostly_llms/</link>
      <description><![CDATA[ You can’t automate what you can’t articulate.  To me, this is one of the core principles of working with generative AI. This is another, perhaps more powerful principle:  In knowledge work, the bottleneck is not the external availability of information.这是处理能力的内部带宽，这取决于您的先天能力和思想的训练状态。源  我认为这已经是发生的问题。 我广泛使用AI。但是，我主要在最了解的领域中受益。这与AI在软件工程中杀死初级职位的假设相吻合，而高级职位仍未受到影响。   ai应用作乘数，而不是代理。     所以，我的假设是我们的假设是AI是AI是乘坐的基础。因此，总的来说，我们从训练我们的思想而不是AI-Improvements中总共受益。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fastsascha      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nezpel/the_limiting_factor_in_using_ai_mostly_llms/</guid>
      <pubDate>Fri, 12 Sep 2025 10:35:46 GMT</pubDate>
    </item>
    <item>
      <title>屏蔽高需求系统免受欺诈</title>
      <link>https://www.reddit.com/r/programming/comments/1ney0wh/shielding_highdemand_systems_from_fraud/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  与机器人作战的一些策略  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/fr0ddy       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ney0wh/shielding_highdemand_systems_from_fraud/</guid>
      <pubDate>Fri, 12 Sep 2025 08:50:58 GMT</pubDate>
    </item>
    <item>
      <title>从氛围编码到生产级系统：param + saarthi🚀</title>
      <link>https://www.reddit.com/r/programming/comments/1nex8mv/from_vibe_coding_to_productiongrade_systems_param/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  曾经想知道“氛围编码”是否可以与10x Engineering与Saarthi（vscode Extension） + param（node.js框架）共存，这就是我们正在探索的内容。  GodSpeed Systems 。     param→node.js中的第4基因微服务框架，带有内置护栏 实践  目标：帮助开发人员（无论是独立黑客，初创企业还是企业）运输速度，更清洁，生产级软件。 奖励：我们的大部分收入都返回开源 +慈善事业。 💚 很想听听您对AI辅助开发工具的想法，以及它们是否正在更改您的编码方式。  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/usensensei     [link]   ＆＃32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nex8mv/from_vibe_coding_to_productiongrade_systems_param/</guid>
      <pubDate>Fri, 12 Sep 2025 07:58:50 GMT</pubDate>
    </item>
    <item>
      <title>使用此应用程序，我了解了反应 +构建创建 + Android控制台的工作方式。该应用程序仅基于必需品，没有干扰，专注于您的培训。 #intervall培训#workout #free #notracking #noadds #simple #trainingapp</title>
      <link>https://www.reddit.com/r/programming/comments/1nex45p/mit_dieser_app_habe_ich_gelernt_wie_reactnative/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/u/sofwareappdev       [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nex45p/mit_dieser_app_habe_ich_gelernt_wie_reactnative/</guid>
      <pubDate>Fri, 12 Sep 2025 07:50:14 GMT</pubDate>
    </item>
    <item>
      <title>BSA启动量子政策议程</title>
      <link>https://www.reddit.com/r/programming/comments/1neuyaq/bsa_launches_quantum_policy_agenda/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/donutloop      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1neuyaq/bsa_launches_quantum_policy_agenda/</guid>
      <pubDate>Fri, 12 Sep 2025 05:31:41 GMT</pubDate>
    </item>
    <item>
      <title>GO中的原型设计模式 - 更快的对象创建🚀</title>
      <link>https://www.reddit.com/r/programming/comments/1neu6uk/prototype_design_pattern_in_go_faster_object/</link>
      <description><![CDATA[Hey folks, I recently wrote a blog about the Prototype Design Pattern and how it can simplify object creation in Go. Instead of constantly re-building complex objects from scratch (like configs, game entities, or nested structs), Prototype lets you clone pre-initialized objects, saving time and reducing beriplate。 在博客中，我介绍：  浅层与深克隆的基础知识。体系结构和性能繁重的应用程序。  如果您曾经在缓慢而昂贵的对象初始化中挣扎，这可能会有所帮助：   https://medium.com/design-bootcamp/understanding-the-prototype-design-pattern-pattern-in-go-a-paractical-guide-329bf656fdec   很好奇地听到您如何在项目中解决类似问题！  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/priyankchheda15     [link]     32;   [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1neu6uk/prototype_design_pattern_in_go_faster_object/</guid>
      <pubDate>Fri, 12 Sep 2025 04:46:07 GMT</pubDate>
    </item>
    <item>
      <title>BUN安装的幕后</title>
      <link>https://www.reddit.com/r/programming/comments/1nesqgh/behind_the_scenes_of_bun_install/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/iamkeyur     [link]&gt; [link]&gt; [link]   [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nesqgh/behind_the_scenes_of_bun_install/</guid>
      <pubDate>Fri, 12 Sep 2025 03:26:49 GMT</pubDate>
    </item>
    <item>
      <title>保持卷发的挑战</title>
      <link>https://www.reddit.com/r/programming/comments/1nesqco/the_challenge_of_maintaining_curl/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/iamkeyur      [注释]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nesqco/the_challenge_of_maintaining_curl/</guid>
      <pubDate>Fri, 12 Sep 2025 03:26:40 GMT</pubDate>
    </item>
    <item>
      <title>浮点在视觉上解释</title>
      <link>https://www.reddit.com/r/programming/comments/1nesp2g/floating_point_visually_explained/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/iamkeyur      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nesp2g/floating_point_visually_explained/</guid>
      <pubDate>Fri, 12 Sep 2025 03:24:47 GMT</pubDate>
    </item>
    <item>
      <title>Ebitengine游戏引擎（教程）的建筑</title>
      <link>https://www.reddit.com/r/programming/comments/1nep5ew/architecture_of_the_ebitengine_game_engine/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/tslocum      [commist]   ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nep5ew/architecture_of_the_ebitengine_game_engine/</guid>
      <pubDate>Fri, 12 Sep 2025 00:28:10 GMT</pubDate>
    </item>
    <item>
      <title>程序合成简介</title>
      <link>https://www.reddit.com/r/programming/comments/1nenpd7/an_introduction_to_program_synthesis/</link>
      <description><![CDATA[＆＃32;提交由＆＃32; /u/u/chavxo      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nenpd7/an_introduction_to_program_synthesis/</guid>
      <pubDate>Thu, 11 Sep 2025 23:19:18 GMT</pubDate>
    </item>
    <item>
      <title>RSL开放许可协议：保护内容免受AI刮板的影响并带回RSS？如果我在做梦，捏我</title>
      <link>https://www.reddit.com/r/programming/comments/1nemhc0/rsl_open_licensing_protocol_protecting_content/</link>
      <description><![CDATA[&lt;！ -  sc_off-&gt;  我还没有看到过讨论的讨论，只有在录音时短暂地通过了它。这似乎有潜力，周围的任何人都戳了吗？  &lt;！ -  sc_on-&gt;＆＃32;提交由＆＃32; /u/u/muhznit      [注释]  ]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1nemhc0/rsl_open_licensing_protocol_protecting_content/</guid>
      <pubDate>Thu, 11 Sep 2025 22:24:40 GMT</pubDate>
    </item>
    </channel>
</rss>