<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>黑客新闻：首页</title>
    <link>https://news.ycombinator.com/</link>
    <description>黑客新闻RSS</description>
    <lastBuildDate>Sun, 18 May 2025 18:24:45 GMT</lastBuildDate>
    <item>
      <title>Google通过公共利用来解决高度严重的铬漏洞</title>
      <link>https://www.bleepingcomputer.com/news/security/google-fixes-high-severity-chrome-flaw-with-public-exploit/</link>
      <description><![CDATA[文章URL： https://www.bleepingcomputer.com/news/security/google-fixes-high-severity-chrome-flaw-with-with-with-public-exploit/  
评论url： https://news.ycombinator.com/item？id=44023295 
点：4 
＃评论：0 ]]></description>
      <guid>https://www.bleepingcomputer.com/news/security/google-fixes-high-severity-chrome-flaw-with-public-exploit/</guid>
      <pubDate>Sun, 18 May 2025 18:17:36 GMT</pubDate>
    </item>
    <item>
      <title>显示HN：球拍表 - 使用声音频率测量羽毛状弦张力</title>
      <link>https://www.racketmeter.com/</link>
      <description><![CDATA[球拍计，让羽毛球玩家使用敲击球拍字符串时产生的声频率测量弦张力。它是100％免费的，可以在移动和桌面上的浏览器中工作，并且不需要注册或安装。我构建了它以解决个人问题。我从2016年开始定期玩羽毛球，并很快得知玩家经常要求弦乐手以特定的紧张局势（例如22或26磅）弦乐器。但是经过一些串行的工作，我开始觉得紧张局势是不一致的。其他玩家告诉我，他们只是敲打琴弦，然后沿着耳朵走去，“更清晰的声音意味着更高的紧张感。” 有一天，在调谐吉他时，我可以在调谐器应用程序上看到精确的声音频率。那是单击的时候。我也应该为羽毛球弦构建调谐器！我在线搜索，发现了专业弦乐器共享的一些张力频率数据，但这并不干净或全面。因此，我访问了5或6个本地纵梁，给了他们一个频率测量应用程序，并要求他们记录每个作业的球拍头大小，弦厚度，张力和声音频率。有些人要求少量付款，但大多数人免费提供了帮助。在一周之内，我有超过200个可实现的数据点。事实证明它非常准确。我与朋友和其他玩家分享了它，并开始在羽毛球论坛上传播。几个月后，有另一个应用程序在大型名人代表下推出，但它不准确，更难使用，并且需要进行应用内购买。我的不是为了竞争而建造的，但最终变得更有用。因此，我将其重建为简单的基于浏览器的工具。会喜欢反馈，改进建议或如何维持它而不用广告或付费墙弄乱它的想法。让我知道您的想法。&gt; 

注释url： https://news.ycombinator.com/item？id=440022781 
点：10 
＃评论：1 ]]></description>
      <guid>https://www.racketmeter.com/</guid>
      <pubDate>Sun, 18 May 2025 17:08:38 GMT</pubDate>
    </item>
    <item>
      <title>$ 30自动百叶窗开瓶器</title>
      <link>https://sifter.org/~simon/journal/20240718.html</link>
      <description><![CDATA[文章url： https://sifter.org/~simon/journal/journal/20240718.html 
注释url： https://news.ycombinator.com/item？id=44022758 
点：32 
＃评论：11 ]]></description>
      <guid>https://sifter.org/~simon/journal/20240718.html</guid>
      <pubDate>Sun, 18 May 2025 17:05:56 GMT</pubDate>
    </item>
    <item>
      <title>LLM人群中新兴的社会惯例和集体偏见</title>
      <link>https://www.science.org/doi/10.1126/sciadv.adu9368</link>
      <description><![CDATA[文章url： https://www.science.org/doi/10.1126/sciadv.adu93368 
注释URL： https://news.ycombinator.com/item？id=440022484 
点：20 
＃评论：1 ]]></description>
      <guid>https://www.science.org/doi/10.1126/sciadv.adu9368</guid>
      <pubDate>Sun, 18 May 2025 16:26:58 GMT</pubDate>
    </item>
    <item>
      <title>抛弃黑曜石并建立我自己的</title>
      <link>https://amberwilliams.io/blogs/building-my-own-pkms</link>
      <description><![CDATA[文章url： https://amberwilliams.io/blogs/blogs/building-my-womding-my-own-my-own-my-own-pkms 
注释url： https://news.ycombinator.com/item?id=440222444 
点：51 
＃评论：68 ]]></description>
      <guid>https://amberwilliams.io/blogs/building-my-own-pkms</guid>
      <pubDate>Sun, 18 May 2025 16:21:50 GMT</pubDate>
    </item>
    <item>
      <title>Show HN：我与Sbert建模了Voynich手稿以测试结构</title>
      <link>https://github.com/brianmg/voynich-nlp-analysis</link>
      <description><![CDATA[我通过将其应用于怪异且未解决的内容来构建该项目，以了解有关NLP的更多信息。 Voynich手稿是一本用未知脚本编写的15世纪书籍。没有人能够翻译它，许多人认为这是骗局，密码或构造语言。我不是要解码它 - 我只是想看看：它的表现像一种结构化语言吗？我知道这是一个很大的假设 - 我直接在存储库中称呼它 - 但它有助于阐明聚类。从那里，我使用Sbert嵌入式和Kmeans来分组相似的根部，根据位置和频率推断出类似POS的角色，并构建了Markov Transition矩阵以可视化群集到群集流。不是翻译。这不是解密。它是结构性建模 - 它揭示了整个手稿上令人惊讶的一致语法，尤其是在按截面（植物学，生物学等）中分解时。 github repo： https://github.com/brianmg/brianmg/voynich-nlp-analysis 
写入：“ nofollow”&gt; https：//brig90.substack.com/p/modeling-phe-p/modeling-poy-poy-poy-mannich-manuscrip ...当然有我错了的事情 - 但是我很喜欢从事结构化语言建模或怪异边缘案例的人的反馈。

注释URL： https://news.ycombinator.com/item?id=440222353 
点：133 
＃评论：29 ]]></description>
      <guid>https://github.com/brianmg/voynich-nlp-analysis</guid>
      <pubDate>Sun, 18 May 2025 16:09:01 GMT</pubDate>
    </item>
    <item>
      <title>86（2001）的令人振奋的起源</title>
      <link>https://muse.jhu.edu/article/2832</link>
      <description><![CDATA[文章URL： https://muse.jhu.edu.edu.edu.edu/article/2832   
注释url： https://news.ycombinator.com/item/item?id=440222322 
点：11 
＃评论：1 ]]></description>
      <guid>https://muse.jhu.edu/article/2832</guid>
      <pubDate>Sun, 18 May 2025 16:04:52 GMT</pubDate>
    </item>
    <item>
      <title>显示HN：buckaroo  - 笔记本的数据表UI</title>
      <link>https://github.com/paddymul/buckaroo</link>
      <description><![CDATA[ buckaroo是我的开源项目。这是一个数据帧查看器，它具有我们在现代表格中期望的基本功能 - 滚动，搜索，排序。另外，还有摘要统计数据和直方图。 Buckaroo支持大熊猫和Polars数据框架，并在Jupter，Marimo，Vscode和Google CoLab笔记本上工作。
所有这些都是可扩展的。我认为Buckaroo是构建表UI的框架，以及在该框架之上构建的初始数据探索应用程序。 AG-Grid用于核心表显示，并且已使用声明层进行自定义，因此您不必将JS功能传递给自定义。在Python方面，有一个框架来添加摘要统计数据（依赖关系的小dag）。还有一个整个低代码UI，可用于点，单击“常见命令”（DROP列）。 LowCode UI还生成了完成相同任务的Python函数。这是在JLISP顶部建造的 - 小型LISP解释器，读取JSON风味的Lisp。将操作添加到可以对其进行编辑的LowCode UI中。可以采用多种清洁策略，并保留最佳拟合。没有UI和多种策略的自动释放非常不透明。由于这是通过启发式运行（不是LLM），因此数据很快，数据一直保持本地。我渴望听到数据科学家和其他数据范围/笔记本的其他用户的反馈。。

注释url： https://news.ycombinator.com/item？id=4400222265 
点：32 
＃评论：3 ]]></description>
      <guid>https://github.com/paddymul/buckaroo</guid>
      <pubDate>Sun, 18 May 2025 15:56:18 GMT</pubDate>
    </item>
    <item>
      <title>间隔重复记忆系统</title>
      <link>https://notes.andymatuschak.org/Spaced_repetition_memory_system</link>
      <description><![CDATA[文章url： https://notes.andymatuschak.org/spaced_repetition_repetition_repetition_memory_memory_memory_system 
注释url： https://news.ycombinator.com/item？id = 440222225 
点：51 
＃评论：1 ]]></description>
      <guid>https://notes.andymatuschak.org/Spaced_repetition_memory_system</guid>
      <pubDate>Sun, 18 May 2025 15:48:57 GMT</pubDate>
    </item>
    <item>
      <title>显示HN：Model2Vec-RS  - 生锈中的快速静态文本嵌入</title>
      <link>https://github.com/MinishLab/model2vec-rs</link>
      <description><![CDATA[嘿，hn！
我们只是开源的Model2Vec-Rs，这是一种用于加载和运行Model2VEC静态嵌入模型的锈蚀箱，其零依赖性为零。这使您可以在（非常）高吞吐量中嵌入文本；例如，在基于生锈的微服务或CLI工具中。它可用于语义搜索，检索，抹布或任何其他嵌入用户酶的文本。主要特征：  - 生锈的推理：加载任何型号的模型2VEC模型，或用staticModel :: from_pretained（...）。 CPU上的基准单线程：  -  python：〜4650 Embeddings/sec   -  rust：〜8000 Embeddings/sec/sec（〜1.7×speedup）对我们来说，RUST中的第一个开放式源项目

评论url： https://news.ycombinator.com/item?id=44021883 
点：15 
＃评论：2 ]]></description>
      <guid>https://github.com/MinishLab/model2vec-rs</guid>
      <pubDate>Sun, 18 May 2025 15:01:35 GMT</pubDate>
    </item>
    </channel>
</rss>