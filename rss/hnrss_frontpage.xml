<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>黑客新闻：首页</title>
    <link>https://news.ycombinator.com/</link>
    <description>黑客新闻RSS</description>
    <lastBuildDate>Fri, 28 Feb 2025 21:16:16 GMT</lastBuildDate>
    <item>
      <title>日本东芝打字机型号BW-2112（2020）[视频]</title>
      <link>https://www.youtube.com/watch?v=JZcui85b4EE</link>
      <description><![CDATA[文章URL： https://www.youtube.com/watch?v=jzcui85b4ee
注释URL： https://news.ycombinator.com/item?id=43210537 
点：3 
＃评论：0 ]]></description>
      <guid>https://www.youtube.com/watch?v=JZcui85b4EE</guid>
      <pubDate>Fri, 28 Feb 2025 20:51:34 GMT</pubDate>
    </item>
    <item>
      <title>Show HN：博彩游戏难题（线性时间以锤击邻居总和）</title>
      <link>https://news.ycombinator.com/item?id=43210185</link>
      <description><![CDATA[在西班牙，有一个名为la Quiniela的博彩游戏： https://es.wikipedia.org/wiki/la_quiniela_（ESPA％c3％b1a） 球员预测14场足球比赛的结果（主场胜利，赢，胜利，胜利）。如果您至少正确10，您会赢得金钱，而奖金金额取决于获奖者的数量。由于所有赌注都是公开的，因此可以估计3^^14可能的结果中的每一个获奖者的数量和相应的支出。我们还可以使用博彩商赔率估算他们的概率，从而使我们能够计算每个预测的预期价值。作为一个附带项目，我想分析这一点，但遇到了一个计算瓶颈：要评估一个预测，我必须总和所有其所有吊销邻居的价值，最高距离为距离近20,000个。 （1+28+364+2912+16016 = 19321）： s_naive = sum k = 0到[（d！ /（（d-k）！ * k！））） *（q-1）） *（q-1）^k]
（d = 14，q = 3，r = 4）这花了几天的时间才能在我的第一个实现中运行。使用矩阵进行优化并进行操作，将其降低到20分钟，但速度太慢（IM以6分钟的限制在气体中运行）。一段时间以来，我使用了一个启发式：从随机预测开始，检查其最近的28个邻居，转到最高价值的邻居，然后重复直到距离3内不进行改进。它效果很好。，我一直在考虑如何正确解决该问题。最终，我意识到可以通过利用重叠来有效地积累部分总和：如果两个预测A和B共享邻居，则可以计算一次共享的邻居并重复使用。这是通过我使用Reshape，Roll和Flatten实施的基本转换来实现的（这可能不是最有效的实现，但最清晰），它通过在维度I中应用偏移来重新调整矩阵。 This transformation has two key properties that enable reducing the number of summations from 19,321 to just 101:- T(T(space, d1), d2) = T(T(space, d2), d1)- T(space1, d) + T(space2, d) = T(space1+space2, d)Number of sums would be the result of this expression:S_PSA = 1 + (d - （r-1）/2） * r *（q-1）我已经对任何数量的维度，每个维度元素和求和半径的算法进行了概括。实现在纯粹的numpy中。我已经将代码上传到了Colab，Github和博客中的解释。显然，这属于锤子邻居的总和，但是我在其他地方没有发现类似的方法（也许我在搜索不佳）。如果您知道或从事类似的工作，我很想听听您的想法！ rel =“ nofollow”&gt; https：//colab.research.google.com/drive/1aenkd7eemgqmjdb8y6y ...   github：  https：//sudapollismo.substack.com/p/partial-sum-acum-acum-acum-acum-acccumulation一下...-

注释URL： https://news.ycombinator.com/item？id=432210185 
点：9 
＃评论：0 ]]></description>
      <guid>https://news.ycombinator.com/item?id=43210185</guid>
      <pubDate>Fri, 28 Feb 2025 20:33:43 GMT</pubDate>
    </item>
    <item>
      <title>Merlion：时间序列智能的机器学习框架</title>
      <link>https://github.com/salesforce/Merlion</link>
      <description><![CDATA[文章URL： https://github.com/salesforce/merlion  
注释URL： https://news.ycombinator.com/item？id=43209064 
点：53 
＃评论：6 ]]></description>
      <guid>https://github.com/salesforce/Merlion</guid>
      <pubDate>Fri, 28 Feb 2025 18:59:23 GMT</pubDate>
    </item>
    <item>
      <title>泽伦斯基生气后离开白宫</title>
      <link>https://www.bbc.com/news/live/c625ex282zzt</link>
      <description><![CDATA[文章URL： https://wwwww.bbc.com/news/news/live/c625ex255ex28282zzt  
注释URL： https://news.ycombinator.com/item？id=43208973 
点：861 
＃评论：942 ]]></description>
      <guid>https://www.bbc.com/news/live/c625ex282zzt</guid>
      <pubDate>Fri, 28 Feb 2025 18:49:46 GMT</pubDate>
    </item>
    <item>
      <title>哈罗德·科恩（Harold Cohen）和亚伦（Aaron） -  40年的合作（2016年）</title>
      <link>https://computerhistory.org/blog/harold-cohen-and-aaron-a-40-year-collaboration/</link>
      <description><![CDATA[文章url： httpps://computerhistory.orgg/blog/blog/blog/blog/harold-coholold-cohen--cohen-cohen-an--aaron-aaron-aaron-a-a-a-a-40-collabor-collabor-collaborati-al-collab/pp&gt;
注释URL： https://news.ycombinator.com/item?id=43208524 
点：7 
＃评论：0 ]]></description>
      <guid>https://computerhistory.org/blog/harold-cohen-and-aaron-a-40-year-collaboration/</guid>
      <pubDate>Fri, 28 Feb 2025 18:02:42 GMT</pubDate>
    </item>
    <item>
      <title>Show HN：GlobStar  - 开源静态分析工具包</title>
      <link>https://news.ycombinator.com/item?id=43207942</link>
      <description><![CDATA[嘿，hn！我们是DeepSource（YC W20）的联合创始人Jai和Sanket。我们正在开放源环球明星（ https://github.com/deepsourcecorp/globstar ），静态分析工具，使您可以轻松地编写和pland yam yam yaml [yaml [yaml [yaml [yam yam yaml yaml [yaml yam yam yaml yaml]关于在DeepSource每天处理数百万行代码的基于AST的静态分析仪，我们一直在听到客户的共同请求：“我们如何编写特定于代码库的自定义检查？” AppSec and DevOps teams have a lot of learned anti-patterns and security rules they want to enforce across their orgs, and being able to do that without being a static analysis expert, came up as an important want.We initially built an internal framework using tree-sitter [3] for our proprietary infrastructure-as-code analyzers, which enabled us to rapidly create new checkers.我们意识到，将框架开源可以为每个人解决这个问题。像Chatgpt和Claude这样的现代AI助手非常出色地以非常高的精度产生树木的查询。我们意识到，树木的粗糙S表达语法不再是问题（因为AI无论如何都会做所有这一代人），而我们可以专注于围绕它构建快速，灵活且可靠的检查器运行时。，所以我们不再创建另一个DSL，所以我们使用了另一个DSL，所以我们使用Tree-Sitter的本机语法。是的，表达式看起来比简化的DSL更复杂，但是它们可以直接访问代码的实际AST结构 - 这意味着您的规则完全按照您的期望工作。当您需要调试规则时，您正在处理代码的实际结构，而不是可能隐藏重要细节的抽象。我们还设计了GlobStar以具有逐渐学习的曲线：YAML界面可用于简单的检查器，而GO接口可以在需要的情况下处理复杂的方案，而当您需要诸如交叉范围分析，范围分析，范围分析，数据流程，数据流量分析和上下文分析，以及AWAREATE和COSTECT ARANANAGES和AWAREATE和CONTECT ARANANESS，AWARENSICESS，和AWAR AWARENESS，和AWAR AWARENESS和AWAR ARANANESS和AWAR AWARENESS。 The Go API gives you direct access to tree-sitter bindings, so you can write arbitrarily complex checkers on day one.Key features:- Written in Go with native tree-sitter bindings, distributed as a single binary- MIT-licensed- Write all your checkers in a “.globstar” folder in your repo, in YAML or Go, and just run “globstar check” without any build steps-通过树的多语言支持（今天20多种语言）我们还有很长的路要走，对于GlobStar来说，我们还有一个非常令人兴奋的路线图，我们很想听听您的反馈！ [1]  https://globstar.dev/guides/guides/writing-yaml-checker   [2]  https://globstar.dev/guides/writing-go-checker   [3] 
注释URL： https://news.ycombinator.com/item?id=43207942 
点：46 
＃评论：14 ]]></description>
      <guid>https://news.ycombinator.com/item?id=43207942</guid>
      <pubDate>Fri, 28 Feb 2025 17:12:26 GMT</pubDate>
    </item>
    <item>
      <title>3,200％的CPU利用率</title>
      <link>https://josephmate.github.io/2025-02-26-3200p-cpu-util/</link>
      <description><![CDATA[文章URL： https://josephmate.githmate.githmate.io/2025-02-02-26-02-26-3200P-CPU--CPU------CPU--------CPU--util/ 
注释URL： https://news.ycombinator.com/item?id=43207831 
点：230 
＃评论：99 ]]></description>
      <guid>https://josephmate.github.io/2025-02-26-3200p-cpu-util/</guid>
      <pubDate>Fri, 28 Feb 2025 17:01:43 GMT</pubDate>
    </item>
    <item>
      <title>暴力改变了世代的人类基因，研究人员发现</title>
      <link>https://news.ufl.edu/2025/02/syrian-violence-epigenetics/</link>
      <description><![CDATA[文章URL： https：//news.ufl.ed.ufl.edu/2025/2025/202/syrian-violence-violence-violence-epigigenetics/
注释URL： https://news.ycombinator.com/item？id=43206722 
点：287 
＃评论：189 ]]></description>
      <guid>https://news.ufl.edu/2025/02/syrian-violence-epigenetics/</guid>
      <pubDate>Fri, 28 Feb 2025 15:33:39 GMT</pubDate>
    </item>
    <item>
      <title>写信以逃脱默认设置</title>
      <link>https://kupajo.com/write-to-escape-your-default-setting/</link>
      <description><![CDATA[文章URL： https://kupajo.com/write-to-scape-escape-escape-your-default-setting/      
注释URL： https://news.ycombinator.com/item？id=43206174 
点：193 
＃评论：55 ]]></description>
      <guid>https://kupajo.com/write-to-escape-your-default-setting/</guid>
      <pubDate>Fri, 28 Feb 2025 14:45:36 GMT</pubDate>
    </item>
    <item>
      <title>OpenLayer（YC S21）正在雇用高级后端工程师</title>
      <link>https://www.ycombinator.com/companies/openlayer/jobs/yIE9WI3-senior-backend-engineer</link>
      <description><![CDATA[文章URL： https://wwwww.ycombinator.com/combinator.com/companies/openlayer/jobs/jobs/jobs/jobs/jobs/jobs/jobs/jobs/yieie9wi3-back-----------------          
注释URL： https://news.ycombinator.com/item?id=43204682 
点：0 
＃评论：0 ]]></description>
      <guid>https://www.ycombinator.com/companies/openlayer/jobs/yIE9WI3-senior-backend-engineer</guid>
      <pubDate>Fri, 28 Feb 2025 12:00:16 GMT</pubDate>
    </item>
    </channel>
</rss>